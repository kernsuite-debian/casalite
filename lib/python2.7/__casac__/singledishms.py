# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_singledishms')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_singledishms')
    _singledishms = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_singledishms', [dirname(__file__)])
        except ImportError:
            import _singledishms
            return _singledishms
        if fp is not None:
            try:
                _mod = imp.load_module('_singledishms', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _singledishms = swig_import_helper()
    del swig_import_helper
else:
    import _singledishms
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class singledishms(_object):
    """Proxy of C++ casac::singledishms class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, singledishms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, singledishms, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _singledishms.delete_singledishms
    __del__ = lambda self: None

    def __init__(self):
        """__init__(self) -> singledishms"""
        this = _singledishms.new_singledishms()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def open(self, *args, **kwargs):
        """
        open(self, ms_name) -> bool



        Summary
        	Open a new MeasurementSet for processing after closing current MeasurementSet


        Description

        Close the current MeasurementSet and open a new MeasurementSet
        instead. The current state of sdms is retained, except for
        the data selection.


        Input Parameters:
        	ms_name		 New MeasurementSet to be processed 

        Example:

        sdms.open('m100_sd.ms')

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_open(self, *args, **kwargs)


    def close(self):
        """
        close(self) -> bool



        Summary
        	Close the sdms tool, with data written on disk, keeping sdms running for future use


        Description

        This is used to close sdms tools. Note that the
        data is written to disk and detached from sdms tool.
        This is a synonym for done.

        Example:

        sdms.close()

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_close(self)


    def done(self):
        """
        done(self) -> bool



        Summary
        	Close the sdms tool

        Description

        This is used to close and sdms tools. Note that the
        data is written to disk  and detached from sdms tool.
        This is a synonym for close.

        Example:

        sdms.done()

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_done(self)


    def name(self):
        """
        name(self) -> string



        Summary
        	Provide the name of the attached MeasurementSet

        Description

            Returns the name of the attached MeasurementSet.

        Example:

        sdms.name()

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_name(self)


    def subtract_baseline(self, *args, **kwargs):
        """
        subtract_baseline(self, datacolumn, outfile, bloutput, dosubtract=True, spw, blfunc, order=5, clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge) -> bool



        Summary
        	Invoke baseline subtraction


        Description

        Fit baseline and subtract it from selected spectra


        Input Parameters:
        	datacolumn	 The name of data column to process ('data', 'float_data', or 'corrected') data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	bloutput	 The name(s) of Baseline to be output 
        	dosubtract	 Execute baseline subtraction from the input data true 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	blfunc		 baseline function poly 
        	order		 polynomial order 5 
        	clip_threshold_sigma	 threshold for clipping in unit of sigma 3.0 
        	num_fitting_max	 maximum number of recursive clipping 1 
        	linefinding	 do line finding false 
        	threshold	 S/N threshold for line finder 5.0 
        	avg_limit	 channel averaging for broad lines in line finding 4 
        	minwidth	 the minimum channel width to detect as a line by line finder 4 
        	edge		 channels to drop at beginning and end of spectrum in line finding 00 

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline(order=3,clip_threshold_sigma=5.0,num_fitting_max=6)

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_subtract_baseline(self, *args, **kwargs)


    def subtract_baseline_cspline(self, *args, **kwargs):
        """
        subtract_baseline_cspline(self, datacolumn, outfile, bloutput, dosubtract=True, spw, npiece=5, clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge) -> bool



        Summary
        	Invoke baseline subtraction


        Description

        Fit baseline and subtract it from selected spectra


        Input Parameters:
        	datacolumn	 The name of data column to process ('data', 'float_data', or 'corrected') data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	bloutput	 The name(s) of Baseline to be output 
        	dosubtract	 Execute baseline subtraction from the input data true 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	npiece		 cspline npiece 5 
        	clip_threshold_sigma	 threshold for clipping in unit of sigma 3.0 
        	num_fitting_max	 maximum number of recursive clipping 1 
        	linefinding	 do line finding false 
        	threshold	 S/N threshold for line finder 5.0 
        	avg_limit	 channel averaging for broad lines in line finding 4 
        	minwidth	 the minimum channel width to detect as a line by line finder 4 
        	edge		 channels to drop at beginning and end of spectrum in line finding 00 

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline_cspline(npiece=3,clip_threshold_sigma=5.0,num_fitting_max=6)

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_subtract_baseline_cspline(self, *args, **kwargs)


    def subtract_baseline_sinusoid(self, *args, **kwargs):
        """
        subtract_baseline_sinusoid(self, datacolumn, outfile, bloutput, dosubtract=True, spw, addwn, rejwn, applyfft=False, fftmethod, fftthresh, clip_threshold_sigma=3.0, num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge) -> bool



        Summary
        	Invoke baseline subtraction


        Description

        Fit baseline and subtract it from selected spectra


        Input Parameters:
        	datacolumn	 The name of data column to process ('data', 'float_data', or 'corrected') data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	bloutput	 The name(s) of Baseline to be output 
        	dosubtract	 Execute baseline subtraction from the input data true 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	addwn		 additional wave numbers to use 0 
        	rejwn		 reject specified wave numbers 
        	applyfft	 automatically set wave numbers of sinusoids false 
        	fftmethod	 method to automatically set wave numbers of sinusoids ['fft'] fft 
        	fftthresh	 threshold to select wave numbers of sinusoids 3.0 
        	clip_threshold_sigma	 threshold for clipping in unit of sigma 3.0 
        	num_fitting_max	 maximum number of recursive clipping 1 
        	linefinding	 do line finding false 
        	threshold	 S/N threshold for line finder 5.0 
        	avg_limit	 channel averaging for broad lines in line finding 4 
        	minwidth	 the minimum channel width to detect as a line by line finder 4 
        	edge		 channels to drop at beginning and end of spectrum in line finding 00 

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline(order=3,clip_threshold_sigma=5.0,num_fitting_max=6)

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_subtract_baseline_sinusoid(self, *args, **kwargs)


    def subtract_baseline_variable(self, *args, **kwargs):
        """
        subtract_baseline_variable(self, datacolumn, outfile, bloutput, dosubtract=True, spw, blparam, verbose=False) -> bool



        Summary
        	Invoke baseline subtraction by parameters stored in a file.


        Description

        Fit baseline and subtract it from selected spectra.
        Fit parameters for each spectrum are obtained from a text file.


        Input Parameters:
        	datacolumn	 The name of data column to process ('data', 'float_data', or 'corrected') data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	bloutput	 The name(s) of Baseline to be output 
        	dosubtract	 Execute baseline subtraction from the input data true 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	blparam		 The name of text file that stores fit parameters for each spectrum of selected MS 
        	verbose		 Print fitting parameters of each spectrum to logger false 

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline_variable('m100_fitparam.txt')

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_subtract_baseline_variable(self, *args, **kwargs)


    def apply_baseline_table(self, *args, **kwargs):
        """
        apply_baseline_table(self, bltable, datacolumn, spw, outfile) -> bool



        Summary
        	Apply baseline table to MS.


        Description

        For each row of given baseline table, read baseline parameters, 
        construct baseline, then subtract it from the corresponding spectrum 
        in the MS.


        Input Parameters:
        	bltable		 The name of input Baseline Table 
        	datacolumn	 The name of data column to process ('data', 'float_data', or 'corrected') data data float_data corrected 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	outfile		 The name of output MeasurementSet 

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.apply_baseline_table('m100_sd.bltable')

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_apply_baseline_table(self, *args, **kwargs)


    def fit_line(self, *args, **kwargs):
        """
        fit_line(self, datacolumn, spw, pol, timebin, timespan, polaverage, fitfunc, nfit, linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge, tempfile, tempoutfile) -> bool



        Summary
        	Invoke line fitting


        Description

        Fit line profile to selected spectra and obtain the best-fit parameter values


        Input Parameters:
        	datacolumn	 The name of data column to process ('data', 'float_data', or 'corrected') data data float_data corrected 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	pol		 Select data by polarization(s) 
        	timebin		 Bin width for time averaging 
        	timespan	 Span the timebin across 'scan', 'state', 'field', or a combination of them (e.g., 'scan,state') 
        	polaverage	 polarization averaging mode ('', 'stokes', or 'geometric') stokes geometric 
        	fitfunc		 Function of line profile gaussian gaussian lorentzian 
        	nfit		 Comma-separated numbers of gaussian/lorentzian lines to fit in maskline region. ignored when linefinding=true. 0 
        	linefinding	 do line finding false 
        	threshold	 S/N threshold for line finder 5.0 
        	avg_limit	 channel averaging for broad lines in line finding 4 
        	minwidth	 the minimum channel width to detect as a line by line finder 4 
        	edge		 channels to drop at beginning and end of spectrum in line finding 00 
        	tempfile	 The name of temporary file to keep fitting results 
        	tempoutfile	 The name of temporary ms file 

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.fit_line(fitfunc='gauss',spw='0:1000~2000;4000~5000',nfit=[1,1])

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_fit_line(self, *args, **kwargs)


    def set_selection(self, *args, **kwargs):
        """
        set_selection(self, spw, field, antenna, timerange, scan, observation, polarization, beam, intent, taql, reindex=True) -> bool



        Summary
        	Select Measurementset to process

        Description




        Input Parameters:
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	field		 Field Ids (0 relative) or Field names (msselection syntax and wilcards are used) to select 
        	antenna		 Antenna Ids (0 relative) or Antenna names (msselection syntax and wilcards are used) to select 
        	timerange	 Limit data selected to be within a given time range. Syntax is defined in the msselection link 
        	scan		 Limit data selected on scan numbers. Syntax is defined in the msselection link 
        	observation	 Select data by observation ID(s). Syntax is the same as for scan numbers. 
        	polarization	 Select data by polarization(s) 
        	beam		 Beam Ids (0 relative) to select; CURRENTLY NOT AVAILABLE!!! 
        	intent		 Select data by intent(s) 
        	taql		 For the TAQL experts, flexible data selection using the TAQL syntax 
        	reindex		 Re-index indices in subtables based on data selection true 

        Example:

        sdms.set_selection(field='M100', spw='3,5')

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_set_selection(self, *args, **kwargs)


    def smooth(self, *args, **kwargs):
        """
        smooth(self, type, width=0.0, datacolumn, outfile) -> bool



        Summary
        	Smooth data with arbitrary smoothing kernel

        Description

          NOTE: currently only Gaussian kernel is supported.


        Input Parameters:
        	type		 Smoothing kernel type gaussian gaussian 
        	width		 Smoothing kernel width 0.0 
        	datacolumn	 The name of data column to process ('data', 'float_data', or 'corrected') data data float_data corrected 
        	outfile		 The name of output MeasurementSet 

        Example:


        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_smooth(self, *args, **kwargs)


    def importasap(self, *args, **kwargs):
        """
        importasap(self, infile, outfile, parallel=False) -> bool



        Summary
        	Import ASAP Scantable to MS.

        Description

          Import ASAP Scantable data to MeasurementSet.


        Input Parameters:
        	infile		 The name of input ASAP Scantable 
        	outfile		 The name of output MeasurementSet 
        	parallel	 Turn on parallel execution false 

        Example:


        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_importasap(self, *args, **kwargs)


    def importnro(self, *args, **kwargs):
        """
        importnro(self, infile, outfile, parallel=False) -> bool



        Summary
        	Import NOSTAR data to MS.

        Description

          Import NOSTAR data to MeasurementSet.


        Input Parameters:
        	infile		 The name of input NOSTAR data 
        	outfile		 The name of output MeasurementSet 
        	parallel	 Turn on parallel execution false 

        Example:


        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_importnro(self, *args, **kwargs)

singledishms_swigregister = _singledishms.singledishms_swigregister
singledishms_swigregister(singledishms)

# This file is compatible with both classic and new-style classes.


