# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_utils')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_utils')
    _utils = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utils', [dirname(__file__)])
        except ImportError:
            import _utils
            return _utils
        if fp is not None:
            try:
                _mod = imp.load_module('_utils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _utils = swig_import_helper()
    del swig_import_helper
else:
    import _utils
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class utils(_object):
    """Proxy of C++ casac::utils class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, utils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, utils, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _utils.delete_utils
    __del__ = lambda self: None

    def __init__(self):
        """__init__(self) -> utils"""
        this = _utils.new_utils()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def verify(self, *args, **kwargs):
        """
        verify(self, input, xmldescriptor, throwexecpt=False) -> bool



        Summary
        	Verifies an input record against an XML interface description of took or task

        Description


        Input Parameters:
        	input		 The input record to verify 
        	xmldescriptor	 XML description, either record or url 
        	throwexecpt	 Throw an exception if the verification fails false 

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils_verify(self, *args, **kwargs)


    def setconstraints(self, *args, **kwargs):
        """
        setconstraints(self, xmldescriptor) -> bool



        Summary
        	Sets the internal contraints records from an XML file

        Input Parameters:
        	xmldescriptor	 XML description, either record or url 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_setconstraints(self, *args, **kwargs)


    def verifyparam(self, *args, **kwargs):
        """
        verifyparam(self, param) -> bool



        Summary
        	Verifies an individual parameter against a prespecified constraints record

        Input Parameters:
        	param		 Parameter name:value pair to verify 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_verifyparam(self, *args, **kwargs)


    def expandparam(self, *args, **kwargs):
        """
        expandparam(self, name, value) -> variant *



        Summary
        	If a param is an enum it will minmatch the enum value and return the full value otherwise it just returns the value

        Input Parameters:
        	name		 Parameter name to expand 
        	value		 Value of the parameter 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_expandparam(self, *args, **kwargs)


    def torecord(self, input):
        """
        torecord(self, input) -> record *



        Summary
        	Transforms an XML string into a record

        Description


        Input Parameters:
        	input		 XML string, maybe a URL 

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils_torecord(self, input)


    def toxml(self, *args, **kwargs):
        """
        toxml(self, input, asfile=False, filename) -> string



        Summary
        	Turns a record into an xml string

        Description


        Input Parameters:
        	input		 name of thing to viewe 
        	asfile		 write the xml as a file false 
        	filename	 if asfile is true then output filename recordas.xml 

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils_toxml(self, *args, **kwargs)


    def getrc(self, *args, **kwargs):
        """
        getrc(self, rcvar) -> string



        Input Parameters:
        	rcvar		 Returns the value of the rc variable given. If no value is give it returns the root directory of CASA. 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_getrc(self, *args, **kwargs)


    def removetable(self, *args, **kwargs):
        """
        removetable(self, tablenames) -> bool



        Input Parameters:
        	tablenames	 Removes tables safely 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_removetable(self, *args, **kwargs)


    def tableinfo(self, *args, **kwargs):
        """
        tableinfo(self, tablename) -> record *



        Summary
        	Get information about a particular table

        Description

            Currently this only returns the pid of the process locking the table (lockpid), if the lock
            is permanent (lockperm), and the status (lockstatus) -- 'not in use', 'open', 'read', 'write',
            or 'unknown'. However, the hope is that this will eventually return a complete description of
            the table.


        Input Parameters:
        	tablename	 path to table 

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils_tableinfo(self, *args, **kwargs)


    def lockedtables(self):
        """
        lockedtables(self) -> std::vector< std::string >



        Summary
        	get the tables locked by this process

        Description

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils_lockedtables(self)


    def hostinfo(self):
        """
        hostinfo(self) -> record *



        Summary
        	returns host information

        Description

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils_hostinfo(self)


    def c_exception(self):
        """
        c_exception(self) -> string



        Summary
        	Returns detailed information about last C-level exception

        Description
        	Returns detailed information from the last CASA C++ exception (i.e., AipsError).  The
                       exception message and the stack trace (mangled; use the shell's c++filt to demangle)
                       from the last CASA C++ exception.  The information is from the last one generated
                       and may not represent an exception from the last action; c\_exception\_clear can be
                       used to remove stale information.  The information's exception might also
                       have been caught in the C++ code and not have been translated into a Python-level
                       exception.

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils_c_exception(self)


    def c_exception_clear(self):
        """
        c_exception_clear(self)



        Summary
        	Clears information about last C-level exception

        Description
        	Clears the CASA C++ exception information.  This allows the user to be sure that
                       information retrieved using c\_exception is not from an exception in the
                       distant past.

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils_c_exception_clear(self)


    def _crash_reporter_initialize(self, crashDumpDirectory, crashDumpPosterApplication, crashPostingUrl, logFile):
        """
        _crash_reporter_initialize(self, crashDumpDirectory, crashDumpPosterApplication, crashPostingUrl, logFile) -> string



        Summary
        	Initializes the crash reporter.

        Description

            Initializes the crash reporter which will generate a crash report if casapy
            crashes.  For reporter purposes a crash is the reception of an signal by
            casapy which would normally result in the program being terminated.  This includes
            segfaults, aborts, etc., plus any unhandled C++ exceptions (C++ generates an
            abort signal for unhandled exceptions).  This method is intended for use by the
            casapy infrastructure and should not be called by other code or by users; however,
            the call will only install the crash reporter the first time it is called so any
            subsequent calls should be no-ops.  Returns true if initialization occurred and
            false if the crash reporter was stubbed out (i.e., symbol UseCrashReporter was
            not defined).


        Input Parameters:
        	crashDumpDirectory	 Directory to write crash dumps into. 
        	crashDumpPosterApplication	 Application to post crash dumps to http server. 
        	crashPostingUrl	 URL to use when posting crash report. 
        	logFile		 Full name of initial logfile 

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils__crash_reporter_initialize(self, crashDumpDirectory, crashDumpPosterApplication, crashPostingUrl, logFile)


    def _trigger_segfault(self, faultType=0):
        """
        _trigger_segfault(self, faultType=0) -> bool



        Summary
        	Crashes casa with segfault.

        Description

            This triggers a segfault for testing the crash reporter.  Obviously you
            shouldn't call this unless that's what you want.  It's in here for
            development/debugging purposes and ought to be removed before you see this.


        Input Parameters:
        	faultType	 How to kill the program 0 

        Example:

        --------------------------------------------------------------------------------

        """
        return _utils.utils__trigger_segfault(self, faultType)


    def initialize(self, default_path):
        """
        initialize(self, default_path) -> bool



        Summary
        	initialize CASAtools

        Description

        returns true if initalization was performed; returns false if initialization was already done


        Input Parameters:
        	default_path	 directories that should constitute the default data path 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_initialize(self, default_path)


    def defaultpath(self):
        """
        defaultpath(self) -> std::vector< std::string >



        Summary
        	returns the default data path

        Description

        Returns the default data path. This path is used unless the user has set the current path to something else using the setpath function.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_defaultpath(self)


    def setpath(self, *args, **kwargs):
        """
        setpath(self, dirs) -> bool



        Summary
        	sets the data path to the specified list of directories

        Description

        Sets the data path to the specified list of directories. Returns true if all directories were added
        returns false otherwise.


        Input Parameters:
        	dirs		 directories that should constitute the data path 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_setpath(self, *args, **kwargs)


    def getpath(self):
        """
        getpath(self) -> std::vector< std::string >



        Summary
        	retrieves the data path

        Description

        Returns the list of directories that are currently in the data path.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_getpath(self)


    def clearpath(self):
        """
        clearpath(self)



        Summary
        	removes all directories from the data path

        Description

        Removes all directories from the data path.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_clearpath(self)


    def resolve(self, *args, **kwargs):
        """
        resolve(self, path) -> string



        Summary
        	resolve a complete path from a subdirectory using the data path

        Description

        If the provided path already represents a file or a directory, it is returned. If it does not,
        this function tries to find a complete path by matching up this partial directory with the
        elements of the data path.


        Input Parameters:
        	path		 path to be expanded 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_resolve(self, *args, **kwargs)


    def registry(self):
        """
        registry(self) -> record *



        Summary
        	retrieve registry information

        Description

        returns record containing the URI for the CASAtools registry which can be used by other unix processes to access the registry

        --------------------------------------------------------------------------------

        """
        return _utils.utils_registry(self)


    def services(self):
        """
        services(self) -> record *



        Summary
        	retrieve registered services

        Description

        returns record containing the information about the services that have been registered with CASAtools

        --------------------------------------------------------------------------------

        """
        return _utils.utils_services(self)


    def shutdown(self):
        """
        shutdown(self)



        Summary
        	shutdown signal from python

        Description

        python is shutting down cleanup anything that is outstanding

        --------------------------------------------------------------------------------

        """
        return _utils.utils_shutdown(self)


    def version(self):
        """
        version(self) -> std::vector< int >



        Summary
        	returns four element vector for the version

        Description


        Returns a four element vector representing the version (major, minor, patch and feature).


        --------------------------------------------------------------------------------

        """
        return _utils.utils_version(self)


    def version_variant(self):
        """
        version_variant(self) -> string



        Summary
        	returns the target instrument f.e. ALMA or VLA

        Description


        Returns the target instrument. This helps distinguish versions that otherwise may have the same version number


        --------------------------------------------------------------------------------

        """
        return _utils.utils_version_variant(self)


    def version_desc(self):
        """
        version_desc(self) -> string



        Summary
        	returns the descriptive version string, e.g. DEV or REL

        Description


        The descriptive string describes a particular packaged version. During a development
        cycle there are different sorts of packaged distributions. For example, a development
        version ('DEV') or a release version ('REL').


        --------------------------------------------------------------------------------

        """
        return _utils.utils_version_desc(self)


    def version_info(self):
        """
        version_info(self) -> string



        Summary
        	Returns the complete version description as a string.

        Description


        Returns a description string that includes the version information and the descriptive string..


        --------------------------------------------------------------------------------

        """
        return _utils.utils_version_info(self)


    def version_string(self):
        """
        version_string(self) -> string



        Summary
        	Returns the complete version description as a string but without the description (i.e. git hash) string.

        Description


        Returns a description string that includes the version information and the descriptive string..


        --------------------------------------------------------------------------------

        """
        return _utils.utils_version_string(self)


    def compare_version(self, comparitor, vec):
        """
        compare_version(self, comparitor, vec) -> bool



        Summary
        	Returns the complete version description as a string.

        Description


        Returns a description string that includes the version information and the descriptive string..



        Input Parameters:
        	comparitor	 what sort of comparison to do, one of >, <, <=, >=, ==, = != 
        	vec		 vector to use to compare current version number against vec 

        --------------------------------------------------------------------------------

        """
        return _utils.utils_compare_version(self, comparitor, vec)


    def toolversion(self):
        """
        toolversion(self) -> std::vector< int >



        Summary
        	returns two element vector containing CASA 6 tool version number

        Description


        Returns a two element vector representing the CASAtools version (year, build). This is only
        returned with CASA 6. With CASA 5, an zero element vector is returned.


        --------------------------------------------------------------------------------

        """
        return _utils.utils_toolversion(self)


    def toolversion_string(self):
        """
        toolversion_string(self) -> string



        Summary
        	Returns the complete CASA 6 CASAtools version description as a string

        Description


        Returns a description string that shows the CASA 6 CASAtools version information as a descriptive string.
        With CASA 5, a zero length string is returned.


        --------------------------------------------------------------------------------

        """
        return _utils.utils_toolversion_string(self)

utils_swigregister = _utils.utils_swigregister
utils_swigregister(utils)

# This file is compatible with both classic and new-style classes.


